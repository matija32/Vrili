using ReactiveUI;
using System;
using System.Reactive.Linq;

namespace Vrili.Core
{
    public class CountdownTimer : ReactiveObject
    {
        public CookingActivity Activity { get; set; }

        private TimeSpan _remainingTime;
        public TimeSpan RemainingTime
        {
            get { return _remainingTime; }
            set { this.RaiseAndSetIfChanged(ref _remainingTime, value); }
        }
    }

    public class OldMainViewModel : ReactiveObject
    {
        const double InitialTimeInSeconds = 4;
        private Model model;

        public ReactiveCommand StartTickingCommand { get; internal set; }
        public ReactiveCommand AddTimerCommand { get; internal set; }
        public IReactiveDerivedList<CountdownTimer> TimerRows { get; internal set; }

        private bool _isRunning = false;
        public bool IsRunning
        {
            get { return this._isRunning; }
            set { this.RaiseAndSetIfChanged(ref _isRunning, value); }
        }

        
        public OldMainViewModel()
        {
            model = new Model();
            TimerRows = model.Activities.CreateDerivedCollection(
                 activity => new CountdownTimer()
                 {
                     Activity = activity,
                     RemainingTime = activity.TotalTime
                 });
            
            var canStart = this.WhenAny(x => x.model.Activities.IsEmpty, x => !x.Value);
            var canAddTimer = this.WhenAny(x => x.IsRunning, x => !x.Value);

            StartTickingCommand = ReactiveCommand.Create(() => StartTicking(), canStart);
            AddTimerCommand = ReactiveCommand.Create(() => AddCookingActivity(), canAddTimer);

        }

        private void AddCookingActivity()
        {
            var activity = new CookingActivity() {
                Name = "Fry bacon",
                TotalTime = TimeSpan.FromSeconds(10)
            };

            model.Activities.Add(activity);
        }

        private void StartTicking()
        {
            IsRunning = true;
            var remaining = TimeSpan.FromSeconds(InitialTimeInSeconds);
            var period = TimeSpan.FromMilliseconds(100);
            var ticker = Observable
                .Interval(period)
                .TakeWhile(_ => TimerRows[0].RemainingTime > period);

            ticker
                .ObserveOn(RxApp.MainThreadScheduler)
                .Subscribe(
                    onNext: x => TimerRows[0].RemainingTime-= period,
                    onCompleted: () => { TimerRows[0].RemainingTime = TimeSpan.Zero; IsRunning = false; }
                );

            ticker
                .Subscribe(
                    onNext: x => Console.WriteLine("RemainingTime={0}", TimerRows[0].RemainingTime),
                    onCompleted: () => Console.WriteLine("done")
                );
        }
    }
}